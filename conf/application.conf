# Copyright 2021 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

play.modules.enabled += "uk.gov.hmrc.mobiletaxcreditsrenewal.config.GuiceModule"

appName = mobile-tax-credits-renewal

appUrl = "https://mobile-tax-credits-renewal.protected.mdtp"

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.crypto.secret = "Pd9xhs2PI5mh]2LC_y16QuxJsVH6q]L?aOB4D39DI`VtADjO_bU>g_b1JTOmOL>l"

# Session configuration
# ~~~~~
application.session.httpOnly = false

application.session.secure = false

# The application languages
# ~~~~~
application.langs = "en"

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.api.sandbox.RoutingHttpRequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.MicroserviceModule"
play.http.filters = "uk.gov.hmrc.play.bootstrap.filters.MicroserviceFilters"

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and 
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule. 

controllers {
  confidenceLevel = 200

  com.kenshoo.play.metrics.MetricsController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }

  uk.gov.hmrc.api.controllers.DocumentationController = {
    needsAuth = false
    needsLogging = true
    needsAuditing = false
  }

  uk.gov.hmrc.mobiletaxcreditsrenewal.controllers.SandboxMobileTaxCreditsRenewalController = {
    needsAuth = false
    needsLogging = true
    needsAuditing = false
  }

  uk.gov.hmrc.mobiletaxcreditsrenewal.controllers.LiveMobileTaxCreditsRenewalController = {
    needsAuth = false
    needsLogging = true
    needsAuditing = false

    authParams = {
      confidenceLevel = 200
    }
  }

  uk.gov.hmrc.mobiletaxcreditsrenewal.controllers.SandboxServiceStateController = {
    needsAuth = false
    needsLogging = true
    needsAuditing = false
  }

  uk.gov.hmrc.mobiletaxcreditsrenewal.controllers.LiveServiceStateController = {
    needsAuth = false
    needsLogging = true
    needsAuditing = false
  }
}

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = INFO

# Logger provided to your application:
logger.application = DEBUG

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}


router {
  regex = "208606423740|167927702220"
  prefix = "/sandbox"
  header = "X-MOBILE-USER-ID"
}

# Microservice specific

auditing {
  enabled = true
  traceRequests = false

  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

api.access.white-list.applicationIds = []

microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {

    auth {
      host = localhost
      port = 8500
    }

    datastream {
      host = localhost
      port = 8100
    }

    ntc {
      host = localhost
      port = 7900

      submission {
        startDate = "2018-04-19T08:00:00.000"
        endDate = "2018-07-31T10:00:00.000"
        endViewRenewalsDate = "2018-11-30T23:59:00.000"
      }

      circuitBreaker {
        numberOfCallsToTriggerStateChange = 5
        unavailablePeriodDurationInSeconds = 120
        unstablePeriodDurationInSeconds = 120
      }
    }

    tax-credits-broker {
      host = localhost
      port = 7901
    }

    mobile-shuttering {
      host = localhost
      port = 8253
    }
  }
}

http-verbs {
  retries {
    ssl-engine-closed-already {
      enabled = true
    }
  }
}
